<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>CSV → Quick Reporter</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <!--
    Data sources embedded by the app (must be triple-braced in Mustache):
      - {{{run_json}}}
      - {{{profile_json}}}
      - {{{dag_json}}}
  -->

  <style>
    :root{
      --bg: #ffffff; --fg: #141414; --muted:#6d6d6d; --card:#f7f7f8; --border:#e6e6e8;
      --acc:#2f6feb; --chip:#eef3ff;
    }
    @media (prefers-color-scheme: dark){
      :root{
        --bg:#0f1115; --fg:#e6e7ea; --muted:#9aa0a6; --card:#171923; --border:#2a2f3a;
        --acc:#8ab4f8; --chip:#1c2330;
      }
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; background:var(--bg); color:var(--fg);
      font: 14px/1.45 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
    }
    .container{max-width:1100px; margin:0 auto; padding:24px 20px 60px}
    header{display:flex; justify-content:space-between; align-items:flex-start; gap:16px; margin-bottom:18px}
    h1{font-size:24px; margin:0}
    .meta{color:var(--muted); font-size:13px}
    .chip{display:inline-block; padding:2px 8px; border-radius:999px; background:var(--chip); color:var(--acc); font-weight:600; font-size:12px}

    .cards{display:grid; gap:12px; grid-template-columns: repeat( auto-fit, minmax(190px, 1fr) ); margin:18px 0 26px}
    .card{background:var(--card); border:1px solid var(--border); border-radius:12px; padding:12px 14px}
    .card h4{margin:0 0 4px; color:var(--muted); font-size:12px; letter-spacing:.2px; font-weight:600}
    .val{font-size:20px; font-weight:700}
    .small{font-size:12px; color:var(--muted)}

    .section{margin:28px 0}
    .section h2{font-size:18px; margin:0 0 10px}
    .grid-2{display:grid; gap:16px; grid-template-columns: repeat(2, minmax(260px, 1fr))}
    @media (max-width: 860px){ .grid-2{grid-template-columns: 1fr} }

    .panel{background:var(--card); border:1px solid var(--border); border-radius:12px; padding:14px}
    .chart{min-height:160px}
    .table{width:100%; border-collapse:collapse; font-size:13px}
    .table th,.table td{padding:8px 10px; border-bottom:1px solid var(--border); text-align:left}
    .table th{color:var(--muted); font-weight:600}

    details{background:var(--card); border:1px solid var(--border); border-radius:12px; padding:0; overflow:hidden}
    details > summary{cursor:pointer; padding:12px 14px; list-style:none; user-select:none; font-weight:600}
    details > summary::-webkit-details-marker{display:none}
    details pre{margin:0; padding:12px 14px; border-top:1px solid var(--border); overflow:auto; max-height:300px}

    footer{margin-top:36px; color:var(--muted); font-size:12px}
    a{color:var(--acc); text-decoration:none}
    a:hover{text-decoration:underline}
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div>
        <h1>CSV → Quick Reporter</h1>
        <div class="meta" id="meta">
          <!-- set by JS -->
        </div>
      </div>
      <div class="chip" id="buildChip">Spec v1</div>
    </header>

    <!-- KPI cards -->
    <section class="cards">
      <div class="card">
        <h4>Rows</h4><div class="val" id="kpi-rows">—</div>
        <div class="small" id="kpi-cols">—</div>
      </div>
      <div class="card">
        <h4>Errors</h4><div class="val" id="kpi-errors">—</div>
        <div class="small">Failures during run</div>
      </div>
      <div class="card">
        <h4>Wall Time</h4><div class="val"><span id="kpi-wall">—</span> <span class="small">ms</span></div>
        <div class="small" id="kpi-startend">—</div>
      </div>
      <div class="card">
        <h4>Input Throughput</h4><div class="val"><span id="kpi-mbps">—</span> <span class="small">MB/s</span></div>
        <div class="small"><span id="kpi-bytes">—</span></div>
      </div>
      <div class="card">
        <h4>Peak RSS</h4><div class="val"><span id="kpi-rss">—</span> <span class="small">MB</span></div>
        <div class="small">Process memory peak</div>
      </div>
      <div class="card">
        <h4>Header</h4><div class="val" id="kpi-header">—</div>
        <div class="small">Dataset has header row</div>
      </div>
    </section>

    <!-- Charts -->
    <section class="section">
      <h2>Throughput Timeline</h2>
      <div class="panel chart" id="chart-throughput">Preparing…</div>
    </section>

    <section class="section grid-2">
      <div class="panel">
        <h2>Per-Stage Activity</h2>
        <div class="chart" id="chart-stage">Preparing…</div>
      </div>
      <div class="panel">
        <h2>Null Ratio by Column</h2>
        <div class="chart" id="chart-null">Preparing…</div>
      </div>
    </section>

    <section class="section grid-2">
      <div class="panel">
        <h2>Memory Over Time</h2>
        <div class="chart" id="chart-mem">Preparing…</div>
      </div>
      <div class="panel">
        <h2>CPU Utilization</h2>
        <div class="chart" id="chart-cpu">Preparing…</div>
      </div>
    </section>

    <!-- Stages table + DAG summary -->
    <section class="section grid-2">
      <div class="panel">
        <h2>Stages</h2>
        <table class="table" id="stages-table">
          <thead><tr><th>Name</th><th>Calls</th><th>P50 (ms)</th><th>P95 (ms)</th></tr></thead>
          <tbody></tbody>
        </table>
      </div>
      <div class="panel">
        <h2>DAG Overview</h2>
        <div id="dag-overview" class="small">—</div>
        <div style="margin-top:8px">
          <ul id="dag-edges" class="small" style="margin:0; padding-left:16px"></ul>
        </div>
      </div>
    </section>

    <!-- Raw JSON (collapsible) -->
    <section class="section">
      <details>
        <summary>View Raw JSON (run / profile / dag)</summary>
        <pre id="json-run"></pre>
        <pre id="json-profile"></pre>
        <pre id="json-dag"></pre>
      </details>
    </section>

    <footer>
      Built by CSV → Quick Reporter • Spec v1 • Charts powered by Vega-Lite.
    </footer>
  </div>

  <!-- Embedded JSON (Mustache: triple-brace to avoid escaping) -->
  <script id="run_json" type="application/json">{{{run_json}}}</script>
  <script id="profile_json" type="application/json">{{{profile_json}}}</script>
  <script id="dag_json" type="application/json">{{{dag_json}}}</script>

  <!-- Vega / Vega-Lite -->
  <script src="https://cdn.jsdelivr.net/npm/vega@5"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-lite@5"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-embed@6"></script>

  <script>
  (function () {
    const $ = sel => document.querySelector(sel);
    const getJSON = (id) => {
      const node = document.getElementById(id);
      if (!node) return null;
      try { return JSON.parse(node.textContent || "{}"); } catch { return null; }
    };

    const run = getJSON('run_json') || {};
    const profile = getJSON('profile_json') || {};
    const dag = getJSON('dag_json') || {};
    const ds = (profile && profile.dataset) || {};
    const stages = Array.isArray(run.stages) ? run.stages : [];
    const samples = Array.isArray(run.samples) ? run.samples : [];
    const cols = Array.isArray(profile.columns) ? profile.columns : [];

    // ---- Header/meta
    const src = ds.source_path || '(unknown)';
    const rows = Number.isFinite(run.rows) ? run.rows : 0;
    const colsCount = Number.isFinite(ds.columns) ? ds.columns : (cols.length || 0);
    $('#meta').textContent = `Source: ${src} • Rows: ${rows} • Cols: ${colsCount}`;

    // ---- KPI cards
    const asMB = (bytes) => (bytes/1048576).toFixed(2) + ' MB';
    $('#kpi-rows').textContent = rows.toLocaleString();
    $('#kpi-cols').textContent = colsCount ? `${colsCount} columns` : '—';
    $('#kpi-errors').textContent = (run.errors ?? 0);
    $('#kpi-wall').textContent = (run.wall_time_ms ?? 0).toFixed(3);
    $('#kpi-startend').textContent = (run.started_at && run.ended_at) ? `${run.started_at} → ${run.ended_at}` : '—';
    $('#kpi-mbps').textContent = (run.throughput_input_mb_s ?? 0).toFixed(3);
    const bytes = Number.isFinite(run.input_bytes) ? run.input_bytes : 0;
    $('#kpi-bytes').textContent = bytes ? `${asMB(bytes)} (${bytes.toLocaleString()} bytes)` : '—';
    $('#kpi-rss').textContent = (run.rss_peak_mb ?? 0).toFixed(2);
    $('#kpi-header').textContent = ds.header_present ? 'Yes' : 'No';

    // ---- Stages table
    const tbody = $('#stages-table tbody');
    if (stages.length === 0) {
      tbody.innerHTML = '<tr><td colspan="4" class="small">No stages recorded.</td></tr>';
    } else {
      tbody.innerHTML = stages.map(s => {
        const p50 = (s.p50_ms != null) ? Number(s.p50_ms).toFixed(3) : '—';
        const p95 = (s.p95_ms != null) ? Number(s.p95_ms).toFixed(3) : '—';
        return `<tr><td>${s.name||'(unnamed)'}</td><td>${s.calls ?? 0}</td><td>${p50}</td><td>${p95}</td></tr>`;
      }).join('');
    }

    // ---- DAG summary
    const nodes = Array.isArray(dag.nodes) ? dag.nodes : [];
    const edges = Array.isArray(dag.edges) ? dag.edges : [];
    $('#dag-overview').textContent = `${nodes.length} nodes • ${edges.length} edges`;
    $('#dag-edges').innerHTML = edges.slice(0, 20).map(e => `<li>${e.from} → ${e.to}</li>`).join('') ||
      '<li>No edges</li>';

    // ---- JSON pretty views
    $('#json-run').textContent = JSON.stringify(run, null, 2);
    $('#json-profile').textContent = JSON.stringify(profile, null, 2);
    $('#json-dag').textContent = JSON.stringify(dag, null, 2);

    // ---- Charts (Vega-Lite)
    const embed = (el, spec) => window.vegaEmbed(el, spec, { actions:false }).catch(()=>{});

    // Throughput: bytes_in → MB over time
    if (samples.length > 0) {
      const vals = samples
        .filter(s => typeof s.ts_ms === 'number')
        .map(s => ({ ts: s.ts_ms, mb: (s.bytes_in||0)/1048576 }));
      if (vals.length > 0) {
        embed('#chart-throughput', {
          $schema: "https://vega.github.io/schema/vega-lite/v5.json",
          width:"container", height:160,
          data:{ values: vals },
          mark:{ type:"line", interpolate:"monotone" },
          encoding:{
            x:{ field:"ts", type:"quantitative", title:"time (ms)" },
            y:{ field:"mb", type:"quantitative", title:"MB in" }
          }
        });
      } else {
        $('#chart-throughput').textContent = 'No throughput samples.';
      }
    } else {
      $('#chart-throughput').textContent = 'No samples captured.';
    }

    // Stages: show calls (fallback) or p95 if present
    if (stages.length > 0) {
      const hasP95 = stages.some(s => typeof s.p95_ms === 'number');
      const spec = hasP95 ? {
        $schema: "https://vega.github.io/schema/vega-lite/v5.json",
        width:"container", height:180,
        data:{ values: stages.map(s => ({ name: s.name, v: s.p95_ms || 0 })) },
        mark:"bar",
        encoding:{
          x:{ field:"name", type:"nominal", sort:null, title:null },
          y:{ field:"v", type:"quantitative", title:"p95 (ms)" },
          tooltip:[{field:"name"},{field:"v", title:"p95 (ms)"}]
        }
      } : {
        $schema: "https://vega.github.io/schema/vega-lite/v5.json",
        width:"container", height:180,
        data:{ values: stages.map(s => ({ name: s.name, v: s.calls || 0 })) },
        mark:"bar",
        encoding:{
          x:{ field:"name", type:"nominal", sort:null, title:null },
          y:{ field:"v", type:"quantitative", title:"calls" },
          tooltip:[{field:"name"},{field:"v", title:"calls"}]
        }
      };
      embed('#chart-stage', spec);
    } else {
      $('#chart-stage').textContent = 'No stage metrics.';
    }

    // Null ratio bars (per column)
    if (cols.length > 0) {
      const vals = cols.map(c => {
        const nn = c.non_null_count||0, nul = c.null_count||0, tot = nn + nul;
        return { col: c.name || '(unknown)', ratio: (tot>0 ? nul/tot : 0) };
      });
      embed('#chart-null', {
        $schema: "https://vega.github.io/schema/vega-lite/v5.json",
        width:"container", height:180,
        data:{ values: vals },
        mark:"bar",
        encoding:{
          x:{ field:"col", type:"nominal", sort:null, title:null },
          y:{ field:"ratio", type:"quantitative", title:"null ratio", axis:{ format:".0%" } },
          tooltip:[{field:"col"},{field:"ratio", title:"null ratio", format:".1%"}]
        }
      });
    } else {
      $('#chart-null').textContent = 'No column profile data.';
    }

    // Memory / CPU over time (if present)
    if (samples.length > 0) {
      const mem = samples.filter(s => typeof s.rss_mb === 'number').map(s => ({ ts:s.ts_ms, rss:s.rss_mb }));
      const cpu = samples.filter(s => typeof s.cpu_pct === 'number').map(s => ({ ts:s.ts_ms, cpu:s.cpu_pct }));
      if (mem.length > 0) {
        embed('#chart-mem', {
          $schema:"https://vega.github.io/schema/vega-lite/v5.json",
          width:"container", height:160,
          data:{ values: mem }, mark:"line",
          encoding:{
            x:{ field:"ts", type:"quantitative", title:"time (ms)"},
            y:{ field:"rss", type:"quantitative", title:"RSS (MB)"}
          }
        });
      } else { $('#chart-mem').textContent = 'No memory samples.'; }
      if (cpu.length > 0) {
        embed('#chart-cpu', {
          $schema:"https://vega.github.io/schema/vega-lite/v5.json",
          width:"container", height:160,
          data:{ values: cpu }, mark:"line",
          encoding:{
            x:{ field:"ts", type:"quantitative", title:"time (ms)"},
            y:{ field:"cpu", type:"quantitative", title:"CPU (%)"}
          }
        });
      } else { $('#chart-cpu').textContent = 'No CPU samples.'; }
    } else {
      $('#chart-mem').textContent = 'No samples.';
      $('#chart-cpu').textContent = 'No samples.';
    }
  })();
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>CSV → Quick Reporter</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <!--
  ============================================
  DATA CONTRACT (from run.json / profile.json / dag.json)
  ============================================

  run.json (version "1")
    - rows: number
    - wall_time_ms: number
    - throughput_input_mb_s: number
    - rss_peak_mb: number
    - errors: number
    - stages: array of { name, calls, p50_ms?, p95_ms? }
    - samples[] (optional): { ts_ms, rss_mb?, cpu_pct?, bytes_in?, bytes_out? }

  profile.json (version "1")
    - dataset: { rows, columns, header_present?, source_path? }
    - columns[]:
        name, logical_type ∈ {int64,float64,bool,date,datetime,string}
        null_count, non_null_count
        min?, max?, mean?, median?, stddev?
        quantiles? (object of p->value)
        cardinality?, topk[]?, histogram? { bins, edges[], counts[] }, null_ratio?

  dag.json (version "1")
    - nodes[]: { id, label, type ∈ {io,parse,analyze,profile,render,other}, duration_ms
                 rows_in?, rows_out?, bytes_in?, bytes_out? }
    - edges[]: { from, to }

  Derived for report cards:
    - p95_pipeline_latency: max(stage.p95_ms) or sum of critical path (later)
    - build_time / link_time: optional (later)

  ============================================
  LAYOUT (no logic, placeholders only)
  ============================================
  - Header
  - Report cards (rows, errors, wall time, input MB/s, p95 stage latency, peak RSS)
  - Charts section (placeholders)
      * Throughput timeline
      * Per-stage latency bars
      * Null heatmap
      * Memory over time
      * CPU utilization
  - DAG section (placeholder)
  - Diff widget area (placeholder for future baseline comparison)
  ============================================
  -->
  <style>
    /* Minimal neutral styling for placeholders */
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 24px; }
    header { margin-bottom: 16px; }
    .cards { display: grid; grid-template-columns: repeat(3, minmax(220px, 1fr)); gap: 12px; margin: 16px 0 24px; }
    .card { border: 1px solid #e0e0e0; border-radius: 12px; padding: 12px 14px; }
    .card h4 { margin: 0 0 6px; font-size: 14px; color: #666; font-weight: 600; }
    .card .val { font-size: 20px; font-weight: 700; }
    .section { margin: 24px 0; }
    .chart { border: 1px dashed #cfcfcf; border-radius: 8px; padding: 18px; color: #777; text-align: center; }
    .grid-2 { display: grid; grid-template-columns: repeat(2, minmax(280px, 1fr)); gap: 16px; }
    footer { margin-top: 36px; color: #888; font-size: 12px; }
  </style>
</head>
<body>

  <header>
    <h1>CSV → Quick Reporter</h1>
    <div>Source: {{profile.dataset.source_path}} • Rows: {{run.rows}}</div>
  </header>

  <!-- Report Cards (values are placeholders; real binding will come later) -->
  <section class="cards">
    <div class="card">
      <h4>Rows Processed</h4>
      <div class="val">{{run.rows}}</div>
    </div>
    <div class="card">
      <h4>Error Count</h4>
      <div class="val">{{run.errors}}</div>
    </div>
    <div class="card">
      <h4>Wall Time (ms)</h4>
      <div class="val">{{run.wall_time_ms}}</div>
    </div>
    <div class="card">
      <h4>Input Throughput (MB/s)</h4>
      <div class="val">{{run.throughput_input_mb_s}}</div>
    </div>
    <div class="card">
      <h4>p95 Stage Latency (ms)</h4>
      <div class="val">{{derived.p95_pipeline_latency}}</div>
    </div>
    <div class="card">
      <h4>Peak RSS (MB)</h4>
      <div class="val">{{run.rss_peak_mb}}</div>
    </div>
  </section>

  <!-- Charts (placeholders only; Vega-Lite wiring happens later) -->
  <section class="section">
    <h2>Throughput Timeline</h2>
    <div class="chart" id="chart-throughput">[placeholder] expects data: samples[].{ ts_ms, bytes_in }</div>
  </section>

  <section class="section grid-2">
    <div>
      <h2>Per-Stage Latencies</h2>
      <div class="chart" id="chart-stage-latencies">[placeholder] expects run.stages[].{ name, p50_ms, p95_ms }</div>
    </div>
    <div>
      <h2>Null Heatmap</h2>
      <div class="chart" id="chart-null-heatmap">[placeholder] expects profile.columns[].{ name, null_ratio }</div>
    </div>
  </section>

  <section class="section grid-2">
    <div>
      <h2>Memory Over Time</h2>
      <div class="chart" id="chart-memory">[placeholder] expects samples[].{ ts_ms, rss_mb }</div>
    </div>
    <div>
      <h2>CPU Utilization</h2>
      <div class="chart" id="chart-cpu">[placeholder] expects samples[].{ ts_ms, cpu_pct }</div>
    </div>
  </section>

  <section class="section">
    <h2>Pipeline DAG</h2>
    <div class="chart" id="dag">[placeholder] expects dag.nodes[], dag.edges[]</div>
  </section>

  <section class="section">
    <h2>Comparison (Diff)</h2>
    <div class="chart" id="diff">[placeholder] expects baseline run JSON to compute deltas</div>
  </section>

  <footer>
    <div>Built by CSV → Quick Reporter • Spec v1 • This file is a template skeleton with documented data expectations; chart rendering will be added later.</div>
  </footer>
</body>
</html>
